Index: src/main/java/com/coolawesome/integrativeproject/MainController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.coolawesome.integrativeproject;\r\n\r\nimport com.coolawesome.integrativeproject.utils.Constants;\r\nimport javafx.animation.KeyFrame;\r\nimport javafx.animation.Timeline;\r\nimport javafx.collections.FXCollections;\r\nimport javafx.collections.ObservableList;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.fxml.FXML;\r\nimport javafx.scene.control.*;\r\nimport javafx.scene.layout.AnchorPane;\r\nimport javafx.util.Duration;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Random;\r\n\r\npublic class MainController {\r\n    public static double g = 0.001;\r\n    @FXML\r\n    public ListView<String> selectedPlanetInfoList;\r\n    @FXML\r\n    public Button viewRandBtn;\r\n    @FXML\r\n    private ListView<String> simulationInfoList;\r\n    @FXML\r\n    private Slider gConstSLD;\r\n    @FXML\r\n    private TextField gConstantTXTF;\r\n    @FXML\r\n    private Button playPauseBTN;\r\n    @FXML\r\n    private ChoiceBox<String> algoChoiceBox;\r\n\r\n    @FXML\r\n    private Button TextureBTN;\r\n\r\n    @FXML\r\n    private Button createBTN;\r\n\r\n    @FXML\r\n    private Slider massSLD;\r\n\r\n    @FXML\r\n    private TextField massTXTF;\r\n\r\n    @FXML\r\n    private Slider radiusSLD;\r\n\r\n    @FXML\r\n    private TextField radiusTXTF;\r\n\r\n    @FXML\r\n    private CheckBox sunCheckB;\r\n\r\n    public AnchorPane viewport;\r\n    private Simulation simulation;\r\n    private int secondsElapsed = 0;\r\n    Timeline timeline;\r\n    private ObservableList<String> simulationListContent = FXCollections.observableArrayList(\r\n            Constants.TIME_ELAPSED_PREFIX,\r\n            Constants.PLANET_COUNT_PREFIX,\r\n            Constants.AVERAGE_FORCE_PREFIX,\r\n            Constants.NUMBER_OF_COLLISIONS_PREFIX\r\n    );\r\n\r\n\r\n    /*\r\n    mass\r\n    radius\r\n    isSun\r\n    import texture\r\n     */\r\n\r\n    @FXML\r\n    public void initialize() {\r\n        viewport.sceneProperty().addListener((observableScene, oldScene, newScene) -> {\r\n            if (newScene != null) {\r\n                newScene.focusOwnerProperty().addListener((observable, oldFocusOwner, newFocusOwner) -> {\r\n                    if (newFocusOwner != viewport) {\r\n                        viewport.requestFocus();\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    void controllerSetup(Simulation simulation) {\r\n        if (!isNull(simulation)) {\r\n            this.simulation = simulation;\r\n            updateSimInfo();\r\n        } else {\r\n            System.out.println(\"Simulation is null\");\r\n        }\r\n\r\n        if (!simulationListContent.isEmpty()) {\r\n            simulationInfoList.setItems(simulationListContent);\r\n        } else {\r\n            System.out.println(\"simulation list is empty\");\r\n        }\r\n\r\n        initializeTime();\r\n        sliderSetup();\r\n    }\r\n\r\n    public void sliderSetup() {\r\n        //g constant\r\n        if (!isNull(gConstSLD) && !isNull(gConstantTXTF)) {\r\n            gConstSLD.valueProperty().addListener(((observableValue, oldValue, newValue) -> {\r\n                String valueString = String.valueOf(newValue);\r\n                int endIndex = Math.min(valueString.length(), 4);\r\n                gConstantTXTF.setText(valueString.substring(0, endIndex));\r\n                updateGConst();\r\n            }));\r\n\r\n            gConstantTXTF.textProperty().addListener((observableValue, oldValue, newValue) -> {\r\n                if (!newValue.isEmpty() && !isValidDouble(newValue)) {\r\n                    gConstantTXTF.setText(oldValue);\r\n                }\r\n            });\r\n        }\r\n\r\n        //mass\r\n        if (!isNull(massSLD) && !isNull(massTXTF)) {\r\n            massSLD.valueProperty().addListener(((observableValue, oldValue, newValue) -> {\r\n                String valueString = String.valueOf(newValue);\r\n                int endIndex = Math.min(valueString.length(), 4);\r\n                massTXTF.setText(valueString.substring(0, endIndex));\r\n            }));\r\n\r\n            massTXTF.textProperty().addListener((observableValue, oldValue, newValue) -> {\r\n                if (!newValue.isEmpty() && !isValidDouble(newValue)) {\r\n                    massTXTF.setText(oldValue);\r\n                }\r\n            });\r\n        }\r\n\r\n        //radius\r\n        if (!isNull(radiusSLD) && !isNull(radiusTXTF)) {\r\n            radiusSLD.valueProperty().addListener(((observableValue, oldValue, newValue) -> {\r\n                String valueString = String.valueOf(newValue);\r\n                int endIndex = Math.min(valueString.length(), 4);\r\n                radiusTXTF.setText(valueString.substring(0, endIndex));\r\n            }));\r\n\r\n            radiusTXTF.textProperty().addListener((observableValue, oldValue, newValue) -> {\r\n                if (!newValue.isEmpty() && !isValidDouble(newValue)) {\r\n                    radiusTXTF.setText(oldValue);\r\n                }\r\n            });\r\n        }\r\n\r\n\r\n        setInitialValues();\r\n    }\r\n\r\n    private boolean isValidDouble(String str) {\r\n        if (isNull(str)) {\r\n            return false;\r\n        }\r\n        try {\r\n            Double.parseDouble(str);\r\n            return true;\r\n        } catch (NumberFormatException e) {\r\n            System.out.println(\"Input Corrected\");\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public void updateSimInfo() {\r\n        simulationListContent.set(1, Constants.PLANET_COUNT_PREFIX + getPlanetCount());\r\n    }\r\n\r\n    private void setInitialValues() {\r\n        if (!isNull(gConstSLD)) {\r\n            gConstSLD.setValue(g);\r\n        } else {\r\n            System.out.println(\"Gravity Constant Slider is null\");\r\n        }\r\n\r\n        massSLD.setValue(0);\r\n        massTXTF.setText(\"0\");\r\n        radiusSLD.setValue(0);\r\n        radiusTXTF.setText(\"0\");\r\n\r\n        algoChoiceBox.getItems().addAll(Constants.ALGORITHM_CHOICES);\r\n\r\n        algoChoiceBox.setValue(Constants.ALGORITHM_CHOICES[0]);\r\n\r\n        gConstantTXTF.setText(g + \"\");\r\n    }\r\n\r\n    private void initializeTime() {\r\n        timeline = new Timeline(new KeyFrame(\r\n                Duration.seconds(1),\r\n                event -> {\r\n                    secondsElapsed++;\r\n                    updateTimer();\r\n                }\r\n        ));\r\n        timeline.setCycleCount(Timeline.INDEFINITE);\r\n        timeline.play();\r\n    }\r\n\r\n    private void updateTimer() {\r\n        int hours = secondsElapsed / 3600;\r\n        int minutes = (secondsElapsed % 3600) / 60;\r\n        int seconds = secondsElapsed % 60;\r\n\r\n        simulationListContent.set(0, Constants.TIME_ELAPSED_PREFIX + String.format(\"%02d:%02d:%02d\", hours, minutes, seconds));\r\n    }\r\n\r\n    private int getPlanetCount() {\r\n        return simulation.planetMap.size();\r\n    }\r\n\r\n    private void updateGConst() {\r\n        g = gConstSLD.getValue();\r\n    }\r\n\r\n    private boolean isNull(Object obj) {\r\n        return obj == null;\r\n    }\r\n\r\n    @FXML\r\n    void playPauseSim(ActionEvent event) {\r\n        simulation.isPaused = !simulation.isPaused;\r\n\r\n        if (simulation.isPaused) {\r\n            System.out.println(\"Simulation is paused\");\r\n            playPauseBTN.setText(\"Play\");\r\n        } else {\r\n            System.out.println(\"Simulation is playing\");\r\n            playPauseBTN.setText(\"Pause\");\r\n        }\r\n    }\r\n\r\n    @FXML\r\n    void onTXTFUpdate(ActionEvent event) {\r\n        Slider source = (Slider) event.getSource();\r\n\r\n        if (source.equals(gConstSLD)) {\r\n            try {\r\n                gConstSLD.setValue(Double.parseDouble(gConstantTXTF.getText()));\r\n                updateGConst();\r\n            } catch (NumberFormatException e) {\r\n                System.out.println(\"Input Corrected in G Constant Slider\");\r\n            }\r\n\r\n        } else if (source.equals(massSLD)) {\r\n            try {\r\n                massSLD.setValue(Double.parseDouble(massTXTF.getText()));\r\n            } catch (NumberFormatException e) {\r\n                System.out.println(\"Input corrected in mass slider\");\r\n            }\r\n        } else if (source.equals(radiusSLD)) {\r\n            try {\r\n                massSLD.setValue(Double.parseDouble(massTXTF.getText()));\r\n                updateGConst();\r\n            } catch (NumberFormatException e) {\r\n                System.out.println(\"Input Corrected in mass Slider\");\r\n            }\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n    public void updateSelectedPlanetInfo(Planet planet) {\r\n        ObservableList<String> planetInfo = FXCollections.observableArrayList(\r\n                \"Position: \" + String.format(\"%.3f, %.3f, %.3f\", planet.position.x, planet.position.y, planet.position.z),\r\n                \"Velocity: \" + String.format(\"%.3f, %.3f, %.3f\", planet.velocity.x, planet.velocity.y, planet.velocity.z),\r\n                \"Accel: \" + String.format(\"%.1e, %.1e, %.1e\", planet.acceleration.x, planet.acceleration.y, planet.acceleration.z),\r\n                \"Radius: \" + String.format(\"%.3f\", planet.radius),\r\n                \"Mass: \" + String.format(\"%.3f\", planet.mass),\r\n                \"Color: \" + planet.color\r\n        );\r\n        selectedPlanetInfoList.setItems(planetInfo);\r\n    }\r\n\r\n    @FXML\r\n    public void viewRandPlanet(ActionEvent event) {\r\n        // Get a random planet from the planetMap\r\n        List<String> keys = new ArrayList<>(simulation.planetMap.keySet());\r\n        String randomKey = keys.get(new Random().nextInt(keys.size()));\r\n        Planet randomPlanet = simulation.planetMap.get(randomKey);\r\n\r\n        // Update the selected planet info\r\n        updateSelectedPlanetInfo(randomPlanet);\r\n\r\n        // Update the current camera planet in the SimulationView\r\n        simulation.simulationView.setCurrentCamPlanetID(randomKey);\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/coolawesome/integrativeproject/MainController.java b/src/main/java/com/coolawesome/integrativeproject/MainController.java
--- a/src/main/java/com/coolawesome/integrativeproject/MainController.java	(revision 7d67bba7c1ed517317d2fcee7142e252499146dc)
+++ b/src/main/java/com/coolawesome/integrativeproject/MainController.java	(date 1712069006153)
@@ -1,6 +1,7 @@
 package com.coolawesome.integrativeproject;
 
 import com.coolawesome.integrativeproject.utils.Constants;
+import com.coolawesome.integrativeproject.utils.Vector3D;
 import javafx.animation.KeyFrame;
 import javafx.animation.Timeline;
 import javafx.collections.FXCollections;
@@ -14,6 +15,7 @@
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Random;
+import java.util.UUID;
 
 public class MainController {
     public static double g = 0.001;
@@ -149,8 +151,6 @@
                 }
             });
         }
-
-
         setInitialValues();
     }
 
@@ -262,7 +262,41 @@
             }
 
         }
+    }
+
+    @FXML
+    void createCustomPlanet(ActionEvent event) {
+
+        //position is camera position
+        //velocity is camera velocity
+        //radius from text field
+        //mass from text field
+        //isSun from choice box
+
+
+        double x = Math.random() * 1000 - 150;
+        double y = Math.random() * 1000 - 150;
+        double z = Math.random() * 1000 - 150;
 
+        double Vx = Math.random() * 2;
+        double Vy = Math.random() * 2;
+        double Vz = Math.random() * 2;
+
+        Vector3D position = new Vector3D(x,y,z);
+        //Vector3D position = new Vector3D(0,0,0);
+        Vector3D velocity = new Vector3D(Vx,Vy,Vz);
+
+        double radius = Double.parseDouble(radiusTXTF.getText());
+        double mass = Double.parseDouble(massTXTF.getText());
+        boolean isSun = sunCheckB.isSelected();
+
+
+
+        Planet planet = new Planet(position, velocity, radius, mass, isSun);
+
+        String uniqueID = UUID.randomUUID().toString().replaceAll("-", "");
+
+        simulation.planetMap.put(uniqueID, planet);
 
     }
 
Index: src/main/java/com/coolawesome/integrativeproject/Simulation.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.coolawesome.integrativeproject;\r\n\r\nimport com.coolawesome.integrativeproject.utils.Vector3D;\r\nimport javafx.scene.layout.AnchorPane;\r\nimport javafx.scene.paint.Color;\r\n\r\nimport java.util.*;\r\n\r\npublic class Simulation {\r\n\r\n    Map<String, Planet> planetMap = new HashMap<>();\r\n    SimulationView simulationView;\r\n\r\n    boolean isPaused = false;\r\n\r\n    public Simulation(AnchorPane viewport, MainController controller) {\r\n        simulationView = new SimulationView(viewport, planetMap, controller);\r\n        initialize(100);\r\n    }\r\n\r\n    public void initialize(int numOfBodies) {\r\n        for (int i = 0; i < numOfBodies; i++) {\r\n\r\n            // Randomizing parameters\r\n            double x = Math.random() * 300 - 150;\r\n            double y = Math.random() * 300 - 150;\r\n            double z = Math.random() * 300 - 150;\r\n            Vector3D randPos = new Vector3D(x,y,z);\r\n            Vector3D randVel = new Vector3D();\r\n            double randRad = 1 + Math.random() * 2;\r\n            double randMass = 5000;\r\n            boolean sun = Math.random() * 4 < 1;\r\n\r\n            // Generate a unique ID for the planet\r\n            String uniqueID = UUID.randomUUID().toString().replaceAll(\"-\", \"\");\r\n\r\n            // Create the Planet object\r\n            Planet randPlanet = new Planet(randPos, randVel, randRad, randMass, sun);\r\n\r\n            // Add the Planet to the Map\r\n            planetMap.put(uniqueID, randPlanet);\r\n        }\r\n        planetMap.put(\"sun\", new Planet(new Vector3D(5000, 0, 0), new Vector3D(), 1000, 100000, true));\r\n    }\r\n\r\n    public void update(double dt){\r\n        // handle physics and collisions\r\n        if(!isPaused) {\r\n            updatePosition(dt);\r\n            handleCollisions();\r\n        }\r\n\r\n        simulationView.update(dt);\r\n    }\r\n\r\n    private void updatePosition(double dt) {\r\n        planetMap.forEach((id, p1) -> {\r\n            Vector3D ftotal = new Vector3D();\r\n            planetMap.forEach((id2, p2) -> {\r\n                if (p1 != p2) {\r\n                    Vector3D dist = Vector3D.difference(p2.position, p1.position);\r\n                    Vector3D f = Vector3D.multiplication((MainController.g * p1.mass * p2.mass) / (dist.magnitude() * dist.magnitude()), Vector3D.unitVector(dist));\r\n                    ftotal.add(f);\r\n                }\r\n                p1.acceleration = Vector3D.multiplication((1 / p1.mass), ftotal);\r\n                p1.velocity.add(Vector3D.multiplication(dt, p1.acceleration));\r\n                p1.position.add(Vector3D.multiplication(dt, p1.velocity));\r\n            });\r\n        });\r\n    }\r\n\r\n    private void handleCollisions() {\r\n        List<String> idPlanetsToRemove = new ArrayList<>();\r\n        planetMap.forEach((id, p1) -> {\r\n            planetMap.forEach((id2, p2) -> {\r\n                if (p1 != p2 && p1 != null && p2 != null) {\r\n                    Vector3D n = Vector3D.unitVector(Vector3D.difference(p1.position, p2.position));\r\n                    double dist = Math.min(Vector3D.sum(Vector3D.difference(p2.position, Vector3D.multiplication(p2.radius, n)), p1.position).magnitude(), Vector3D.difference(Vector3D.difference(p2.position, Vector3D.multiplication(p2.radius, n)), p1.position).magnitude());\r\n                    if (p1.radius > dist) {\r\n                        p1.mass += p2.mass;\r\n                        p1.radius = Math.sqrt(p1.radius * p1.radius + p2.radius * p2.radius);\r\n                        double totalMass = p1.mass + p2.mass;\r\n                        int red = (int)Math.min(((p1.mass/totalMass)*p1.color.getRed() + (p2.mass/totalMass)*p2.color.getRed())*255,255);\r\n                        int green = (int)Math.min(((p1.mass/totalMass)*p1.color.getGreen() + (p2.mass/totalMass)*p2.color.getGreen())*255,255);\r\n                        int blue = (int)Math.min(((p1.mass/totalMass)*p1.color.getBlue() + (p2.mass/totalMass)*p2.color.getBlue())*255,255);\r\n\r\n                        p1.color = Color.rgb(red, green, blue);\r\n                        idPlanetsToRemove.add(id2);\r\n                    }\r\n                }\r\n            });\r\n        });\r\n        idPlanetsToRemove.forEach((id) -> planetMap.remove(id));\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/coolawesome/integrativeproject/Simulation.java b/src/main/java/com/coolawesome/integrativeproject/Simulation.java
--- a/src/main/java/com/coolawesome/integrativeproject/Simulation.java	(revision 7d67bba7c1ed517317d2fcee7142e252499146dc)
+++ b/src/main/java/com/coolawesome/integrativeproject/Simulation.java	(date 1712068850235)
@@ -15,7 +15,7 @@
 
     public Simulation(AnchorPane viewport, MainController controller) {
         simulationView = new SimulationView(viewport, planetMap, controller);
-        initialize(100);
+        initialize(0);
     }
 
     public void initialize(int numOfBodies) {
Index: src/main/java/com/coolawesome/integrativeproject/SimulationView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.coolawesome.integrativeproject;\r\n\r\nimport com.coolawesome.integrativeproject.utils.PIDController;\r\nimport javafx.scene.*;\r\nimport javafx.scene.image.Image;\r\nimport javafx.scene.input.KeyCode;\r\nimport javafx.scene.paint.Color;\r\nimport javafx.scene.layout.AnchorPane;\r\n\r\nimport javafx.scene.shape.Sphere;\r\nimport org.fxyz3d.scene.Skybox;\r\nimport org.fxyz3d.utils.CameraTransformer;\r\n\r\nimport com.coolawesome.integrativeproject.utils.Vector3D;\r\n\r\nimport java.util.HashSet;\r\nimport java.util.Map;\r\nimport java.util.Set;\r\n\r\n\r\npublic class SimulationView extends Group {\r\n\r\n    private final Set<KeyCode> keysPressed = new HashSet<>();\r\n\r\n    private final Map<String, Planet> planetMap;\r\n    private final MainController mainController;\r\n    private String currentCamPlanetID = \"\";\r\n\r\n    private final Image\r\n        backImage = new Image(\"file:src/main/resources/images/skybox/back.png\"),\r\n        bottomImage = new Image(\"file:src/main/resources/images/skybox/bottom.png\"),\r\n        frontImage = new Image(\"file:src/main/resources/images/skybox/front.png\"),\r\n        leftImage = new Image(\"file:src/main/resources/images/skybox/left.png\"),\r\n        rightImage = new Image(\"file:src/main/resources/images/skybox/right.png\"),\r\n        topImage = new Image(\"file:src/main/resources/images/skybox/top.png\"),\r\n        cubeMap = new Image(\"file:src/main/resources/images/skybox/cubemap.png\");\r\n    private final Skybox skyBox;\r\n\r\n    private final PerspectiveCamera camera;\r\n    private final double FOV = 60;\r\n    private final CameraTransformer cameraTransform = new CameraTransformer();\r\n    private final Vector3D cameraVelocity = new Vector3D();\r\n\r\n    private double deltaMouseX, deltaMouseY = 0;\r\n\r\n    public SimulationView(AnchorPane pane, Map<String, Planet> planetMap, MainController mainController) {\r\n        this.planetMap = planetMap;\r\n        this.mainController = mainController;\r\n\r\n        // Set up the subscene for 3D content\r\n        SubScene subScene = new SubScene(this, pane.getWidth(), pane.getHeight(), true, SceneAntialiasing.BALANCED);\r\n        subScene.widthProperty().bind(pane.widthProperty());\r\n        subScene.heightProperty().bind(pane.heightProperty());\r\n        subScene.setFill(Color.BLACK);\r\n        pane.getChildren().add(subScene);\r\n\r\n        // Set up the camera\r\n        camera = new PerspectiveCamera(true);\r\n        camera.setNearClip(0.1);\r\n        camera.setFarClip(100000.0);\r\n        camera.setTranslateX(0);\r\n        camera.setTranslateY(0);\r\n        camera.setTranslateZ(0);\r\n        camera.setFieldOfView(FOV);\r\n        cameraTransform.getChildren().add(camera);\r\n        cameraTransform.t.setX(0);\r\n        cameraTransform.t.setY(0);\r\n        cameraTransform.t.setZ(0);\r\n        cameraTransform.rx.setPivotZ(0);\r\n        cameraTransform.ry.setPivotZ(0);\r\n        subScene.setCamera(camera);\r\n        cameraTransform.t.setZ(-100);\r\n\r\n        AmbientLight al = new AmbientLight(Color.rgb(100, 100, 100));\r\n\r\n        skyBox = new Skybox(topImage, bottomImage, rightImage, leftImage, frontImage, backImage, 100000, camera);\r\n\r\n        this.getChildren().addAll(al, skyBox);\r\n\r\n        // Set up the event handlers\r\n        subScene.setOnMousePressed(event -> {\r\n            deltaMouseX = event.getSceneX();\r\n            deltaMouseY = event.getSceneY();\r\n        });\r\n        subScene.setOnMouseDragged(event -> {\r\n            currentCamPlanetID = \"\";\r\n            deltaMouseX = event.getSceneX() - deltaMouseX;\r\n            deltaMouseY = event.getSceneY() - deltaMouseY;\r\n\r\n            cameraTransform.ry.setAngle(cameraTransform.ry.getAngle() + deltaMouseX * 0.2);\r\n            cameraTransform.rx.setAngle(cameraTransform.rx.getAngle() - deltaMouseY * 0.2);\r\n\r\n            deltaMouseX = event.getSceneX();\r\n            deltaMouseY = event.getSceneY();\r\n        });\r\n        pane.setOnKeyPressed(event -> keysPressed.add(event.getCode()));\r\n        pane.setOnKeyReleased(event -> keysPressed.remove(event.getCode()));\r\n\r\n        subScene.requestFocus();\r\n    }\r\n\r\n    public void update(double dt) {\r\n        // Update the selected planet info list\r\n        if (!currentCamPlanetID.isEmpty()) {\r\n            this.mainController.updateSelectedPlanetInfo(planetMap.get(currentCamPlanetID));\r\n        }\r\n\r\n        // check if there are any planets not currently in the scene\r\n        planetMap.forEach((id, planet) -> {\r\n            if (!this.getChildren().contains(planet.planetNode)) {\r\n                this.getChildren().add(planet.planetNode);\r\n                planet.planetNode.setOnMouseClicked(event -> {\r\n                    currentCamPlanetID = id;\r\n                });\r\n            }\r\n            if (planet.isSun && !this.getChildren().contains(planet.sunLight)) {\r\n                this.getChildren().add(planet.sunLight);\r\n            }\r\n        });\r\n\r\n        // check if there are any planets in the scene that are not in the map\r\n        Set<Node> nodesToRemove = new HashSet<>();\r\n        for (Node node : this.getChildren()) {\r\n            if (node instanceof Sphere) {\r\n                boolean found = false;\r\n                for (Planet planet : planetMap.values()) {\r\n                    if (planet.planetNode.equals(node)) {\r\n                        found = true;\r\n                        break;\r\n                    }\r\n                }\r\n                if (!found) {\r\n                    nodesToRemove.add(node);\r\n                    if (currentCamPlanetID.equals(node.getId())) {\r\n                        currentCamPlanetID = \"\";\r\n                    }\r\n                }\r\n            }\r\n            if (node instanceof PointLight) {\r\n                boolean found = false;\r\n                for (Planet planet : planetMap.values()) {\r\n                    if (planet.isSun && planet.sunLight.equals(node)) {\r\n                        found = true;\r\n                        break;\r\n                    }\r\n                }\r\n                if (!found) {\r\n                    nodesToRemove.add(node);\r\n                }\r\n            }\r\n        }\r\n        this.getChildren().removeAll(nodesToRemove);\r\n\r\n        //update the position of the planets\r\n        for (var planet : planetMap.values()) {\r\n            planet.planetNode.setTranslateX(planet.position.x);\r\n            planet.planetNode.setTranslateY(planet.position.y);\r\n            planet.planetNode.setTranslateZ(planet.position.z);\r\n            if (planet.isSun){\r\n                planet.sunLight.setTranslateX(planet.position.x);\r\n                planet.sunLight.setTranslateY(planet.position.y);\r\n                planet.sunLight.setTranslateZ(planet.position.z);\r\n            }\r\n        }\r\n\r\n        //TODO: fix looking straight up/down\r\n\r\n        // Move the camera\r\n        double yaw = Math.toRadians(cameraTransform.ry.getAngle());\r\n        double pitch = Math.toRadians(cameraTransform.rx.getAngle());\r\n\r\n        double x = Math.cos(pitch) * Math.sin(yaw);\r\n        double y = Math.sin(pitch);\r\n        double z = Math.cos(pitch) * Math.cos(yaw);\r\n\r\n        Vector3D facing = new Vector3D(x, y, z);\r\n        facing.normalize();\r\n\r\n        Vector3D right = Vector3D.crossProduct(facing, new Vector3D(0, 1, 0));\r\n        right.normalize();\r\n\r\n        Vector3D up = Vector3D.crossProduct(right, facing);\r\n        up.normalize();\r\n\r\n        facing.multiply(0.6); // reduce the speed of the camera\r\n        right.multiply(0.6);\r\n        up.multiply(0.6);\r\n\r\n        if (!currentCamPlanetID.isEmpty()) {\r\n            Planet planet = planetMap.get(currentCamPlanetID);\r\n            if (planet != null) {\r\n                Vector3D camPos = new Vector3D(\r\n                        cameraTransform.t.getX(),\r\n                        cameraTransform.t.getY(),\r\n                        cameraTransform.t.getZ()\r\n                );\r\n                Vector3D planetPos = planet.position;\r\n                Vector3D direction = Vector3D.difference(planetPos, camPos);\r\n                double distance = direction.magnitude();\r\n                direction.normalize();\r\n\r\n                double directionPitch = -Math.toDegrees(Math.asin(direction.y));\r\n                double directionYaw = Math.toDegrees(Math.atan2(direction.x, direction.z));\r\n\r\n                cameraTransform.rx.setAngle(lerpAngle(cameraTransform.rx.getAngle(), directionPitch, 0.5));\r\n                cameraTransform.ry.setAngle(lerpAngle(cameraTransform.ry.getAngle(), directionYaw, 0.5));\r\n\r\n                //Use PID controller to move towards planet\r\n                direction.negate();\r\n                PIDController pidController = new PIDController(1e-15, 1e-2, 1e-8);\r\n                double pidOutput = pidController.calculate(planet.radius * 3, distance);\r\n                direction.multiply(pidOutput);\r\n                cameraVelocity.add(direction);\r\n\r\n                //TODO: orbit camera around planet\r\n\r\n            }\r\n\r\n        } else {\r\n\r\n            if (keysPressed.contains(KeyCode.W)) {\r\n                cameraVelocity.x += facing.x;\r\n                cameraVelocity.y -= facing.y;\r\n                cameraVelocity.z += facing.z;\r\n            }\r\n            if (keysPressed.contains(KeyCode.S)) {\r\n                cameraVelocity.x -= facing.x;\r\n                cameraVelocity.y += facing.y;\r\n                cameraVelocity.z -= facing.z;\r\n            }\r\n            if (keysPressed.contains(KeyCode.A)) {\r\n                cameraVelocity.x += right.x;\r\n                cameraVelocity.y -= right.y;\r\n                cameraVelocity.z += right.z;\r\n            }\r\n            if (keysPressed.contains(KeyCode.D)) {\r\n                cameraVelocity.x -= right.x;\r\n                cameraVelocity.y += right.y;\r\n                cameraVelocity.z -= right.z;\r\n            }\r\n            if (keysPressed.contains(KeyCode.SPACE)) {\r\n                cameraVelocity.x += up.x;\r\n                cameraVelocity.y -= up.y;\r\n                cameraVelocity.z += up.z;\r\n            }\r\n            if (keysPressed.contains(KeyCode.CONTROL)) {\r\n                cameraVelocity.x -= up.x;\r\n                cameraVelocity.y += up.y;\r\n                cameraVelocity.z -= up.z;\r\n            }\r\n            if (keysPressed.contains(KeyCode.SHIFT)) {\r\n                cameraVelocity.multiply(1.2);\r\n            }\r\n        }\r\n\r\n        cameraTransform.t.setX(cameraTransform.t.getX() + cameraVelocity.x);\r\n        cameraTransform.t.setY(cameraTransform.t.getY() + cameraVelocity.y);\r\n        cameraTransform.t.setZ(cameraTransform.t.getZ() + cameraVelocity.z);\r\n\r\n        cameraVelocity.multiply(0.8);\r\n    }\r\n\r\n    private double lerpAngle(double start, double end, double t) {\r\n        double diff = end - start;\r\n        // Normalize the difference in the angle\r\n        while (diff < -180) diff += 360;\r\n        while (diff > 180) diff -= 360;\r\n        return start + diff * t;\r\n    }\r\n\r\n    public void setCurrentCamPlanetID(String planetID) {\r\n        this.currentCamPlanetID = planetID;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/coolawesome/integrativeproject/SimulationView.java b/src/main/java/com/coolawesome/integrativeproject/SimulationView.java
--- a/src/main/java/com/coolawesome/integrativeproject/SimulationView.java	(revision 7d67bba7c1ed517317d2fcee7142e252499146dc)
+++ b/src/main/java/com/coolawesome/integrativeproject/SimulationView.java	(date 1712066236074)
@@ -53,7 +53,6 @@
         subScene.heightProperty().bind(pane.heightProperty());
         subScene.setFill(Color.BLACK);
         pane.getChildren().add(subScene);
-
         // Set up the camera
         camera = new PerspectiveCamera(true);
         camera.setNearClip(0.1);
Index: src/main/resources/com/coolawesome/integrativeproject/main-view.fxml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n\r\n<?import javafx.geometry.Insets?>\r\n<?import javafx.scene.control.Button?>\r\n<?import javafx.scene.control.CheckBox?>\r\n<?import javafx.scene.control.ChoiceBox?>\r\n<?import javafx.scene.control.Label?>\r\n<?import javafx.scene.control.ListView?>\r\n<?import javafx.scene.control.Separator?>\r\n<?import javafx.scene.control.Slider?>\r\n<?import javafx.scene.control.TextField?>\r\n<?import javafx.scene.control.TitledPane?>\r\n<?import javafx.scene.layout.AnchorPane?>\r\n<?import javafx.scene.layout.BorderPane?>\r\n<?import javafx.scene.layout.HBox?>\r\n<?import javafx.scene.layout.VBox?>\r\n<?import javafx.scene.paint.Color?>\r\n<?import javafx.scene.paint.LinearGradient?>\r\n<?import javafx.scene.paint.Stop?>\r\n<?import javafx.scene.text.Font?>\r\n\r\n<BorderPane xmlns=\"http://javafx.com/javafx/20.0.1\" xmlns:fx=\"http://javafx.com/fxml/1\" fx:controller=\"com.coolawesome.integrativeproject.MainController\">\r\n  <left>\r\n    <VBox spacing=\"10\" style=\"-fx-padding: 10;\">\r\n         <Label text=\"Space Simulation\">\r\n            <textFill>\r\n               <LinearGradient endX=\"0.6926713947990544\" endY=\"0.7990543735224587\" startY=\"0.6832151300236406\">\r\n                  <stops>\r\n                     <Stop>\r\n                        <color>\r\n                           <Color red=\"1.0\" green=\"0.6499999761581421\" />\r\n                        </color>\r\n                     </Stop>\r\n                     <Stop offset=\"1.0\">\r\n                        <color>\r\n                           <Color red=\"1.0\" green=\"0.28240740299224854\" blue=\"0.8923611044883728\" />\r\n                        </color>\r\n                     </Stop>\r\n                  </stops>\r\n               </LinearGradient>\r\n            </textFill>\r\n            <font>\r\n               <Font name=\"Marlett\" size=\"28.0\" />\r\n            </font>\r\n         </Label>\r\n         <HBox prefHeight=\"5.0\" prefWidth=\"241.0\" spacing=\"5.0\">\r\n            <children>\r\n               <Button mnemonicParsing=\"false\" text=\"Save\" />\r\n               <Button mnemonicParsing=\"false\" text=\"Load\" />\r\n            </children>\r\n         </HBox>\r\n      <Label text=\"Simulation Info:\" />\r\n      <ListView fx:id=\"simulationInfoList\" prefHeight=\"220.0\" prefWidth=\"220.0\">\r\n        <!-- Add items here -->\r\n      </ListView>\r\n         <AnchorPane prefHeight=\"200.0\" prefWidth=\"200.0\">\r\n            <children>\r\n               <Label text=\"Controls:\">\r\n                  <font>\r\n                     <Font size=\"14.0\" />\r\n                  </font>\r\n               </Label>\r\n               <VBox prefHeight=\"200.0\" prefWidth=\"247.0\">\r\n                  <children>\r\n                     <Label text=\"Algorithm:\">\r\n                        <VBox.margin>\r\n                           <Insets top=\"20.0\" />\r\n                        </VBox.margin>\r\n                        <padding>\r\n                           <Insets top=\"10.0\" />\r\n                        </padding>\r\n                     </Label>\r\n                     <ChoiceBox fx:id=\"algoChoiceBox\" prefHeight=\"25.0\" prefWidth=\"95.0\">\r\n                        <VBox.margin>\r\n                           <Insets top=\"5.0\" />\r\n                        </VBox.margin>\r\n                     </ChoiceBox>\r\n                     <HBox prefHeight=\"42.0\" prefWidth=\"220.0\">\r\n                        <children>\r\n                           <Button fx:id=\"playPauseBTN\" mnemonicParsing=\"false\" onAction=\"#playPauseSim\" text=\"Pause\" />\r\n                        </children>\r\n                        <VBox.margin>\r\n                           <Insets top=\"10.0\" />\r\n                        </VBox.margin>\r\n                     </HBox>\r\n                     <HBox alignment=\"CENTER_LEFT\" prefHeight=\"100.0\" prefWidth=\"200.0\">\r\n                        <VBox.margin>\r\n                           <Insets top=\"5.0\" />\r\n                        </VBox.margin>\r\n                     </HBox>\r\n                     <HBox alignment=\"CENTER_LEFT\" prefHeight=\"100.0\" prefWidth=\"200.0\">\r\n                        <children>\r\n                           <Label text=\"G Constant:\">\r\n                              <HBox.margin>\r\n                                 <Insets right=\"5.0\" />\r\n                              </HBox.margin>\r\n                           </Label>\r\n                           <Slider fx:id=\"gConstSLD\" blockIncrement=\"0.005\" max=\"0.01\" min=\"1.0E-8\" prefHeight=\"14.0\" prefWidth=\"84.0\" showTickMarks=\"true\">\r\n                              <HBox.margin>\r\n                                 <Insets />\r\n                              </HBox.margin>\r\n                           </Slider>\r\n                           <TextField fx:id=\"gConstantTXTF\" onAction=\"#onTXTFUpdate\" prefHeight=\"25.0\" prefWidth=\"80.0\" />\r\n                        </children>\r\n                     </HBox>\r\n                  </children>\r\n               </VBox>\r\n            </children>\r\n         </AnchorPane>\r\n    </VBox>\r\n  </left>\r\n  <center>\r\n    <AnchorPane fx:id=\"viewport\">\r\n      <!-- Content for viewport here -->\r\n    </AnchorPane>\r\n  </center>\r\n  <right>\r\n    <VBox spacing=\"10\" style=\"-fx-padding: 10;\">\r\n      <TitledPane collapsible=\"false\" text=\"New Planet Preview\">\r\n        <VBox>\r\n               <children>\r\n                  <AnchorPane maxHeight=\"-Infinity\" maxWidth=\"-Infinity\" minHeight=\"-Infinity\" minWidth=\"-Infinity\" prefHeight=\"164.0\" prefWidth=\"214.0\">\r\n                     <padding>\r\n                        <Insets left=\"1.0\" right=\"1.0\" />\r\n                     </padding>\r\n                  </AnchorPane>\r\n                  <VBox prefHeight=\"200.0\" prefWidth=\"100.0\" spacing=\"30.0\">\r\n                     <children>\r\n                        <HBox prefHeight=\"100.0\" prefWidth=\"200.0\">\r\n                           <children>\r\n                              <Slider fx:id=\"massSLD\" />\r\n                              <TextField fx:id=\"massTXTF\" onAction=\"#onTXTFUpdate\" />\r\n                           </children>\r\n                        </HBox>\r\n                        <HBox prefHeight=\"100.0\" prefWidth=\"200.0\">\r\n                           <children>\r\n                              <Slider fx:id=\"radiusSLD\" />\r\n                              <TextField fx:id=\"radiusTXTF\" onAction=\"#onTXTFUpdate\" />\r\n                           </children>\r\n                        </HBox>\r\n                        <CheckBox fx:id=\"sunCheckB\" mnemonicParsing=\"false\" text=\"Sun\" />\r\n                        <Button fx:id=\"TextureBTN\" mnemonicParsing=\"false\" text=\"Texture\" />\r\n                        <Button fx:id=\"createBTN\" mnemonicParsing=\"false\" text=\"Create\" />\r\n                     </children>\r\n                  </VBox>\r\n               </children></VBox>\r\n      </TitledPane>\r\n      <TitledPane collapsible=\"false\" text=\"Currently Selected Planet Info\">\r\n        <VBox alignment=\"TOP_CENTER\" spacing=\"10.0\">\r\n               <children>\r\n                  <Button fx:id=\"viewRandBtn\" alignment=\"CENTER\" mnemonicParsing=\"false\" onAction=\"#viewRandPlanet\" text=\"View Random Planet\" textAlignment=\"CENTER\" />\r\n                  <Separator prefWidth=\"200.0\" />\r\n                   <ListView fx:id=\"selectedPlanetInfoList\" prefHeight=\"220.0\" prefWidth=\"220.0\">\r\n                       <!-- Add items here -->\r\n                   </ListView>\r\n               </children></VBox>\r\n      </TitledPane>\r\n    </VBox>\r\n  </right>\r\n</BorderPane>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/com/coolawesome/integrativeproject/main-view.fxml b/src/main/resources/com/coolawesome/integrativeproject/main-view.fxml
--- a/src/main/resources/com/coolawesome/integrativeproject/main-view.fxml	(revision 7d67bba7c1ed517317d2fcee7142e252499146dc)
+++ b/src/main/resources/com/coolawesome/integrativeproject/main-view.fxml	(date 1712068049801)
@@ -126,21 +126,23 @@
                   </AnchorPane>
                   <VBox prefHeight="200.0" prefWidth="100.0" spacing="30.0">
                      <children>
-                        <HBox prefHeight="100.0" prefWidth="200.0">
+                        <HBox prefHeight="100.0" prefWidth="200.0" spacing="5.0">
                            <children>
-                              <Slider fx:id="massSLD" />
-                              <TextField fx:id="massTXTF" onAction="#onTXTFUpdate" />
+                              <Label text="Radius:" />
+                              <Slider fx:id="massSLD" max="10.0" min="1.0" prefWidth="110.0" />
+                              <TextField fx:id="massTXTF" onAction="#onTXTFUpdate" prefHeight="25.0" prefWidth="65.0" />
                            </children>
                         </HBox>
-                        <HBox prefHeight="100.0" prefWidth="200.0">
+                        <HBox prefHeight="100.0" prefWidth="200.0" spacing="5.0">
                            <children>
-                              <Slider fx:id="radiusSLD" />
-                              <TextField fx:id="radiusTXTF" onAction="#onTXTFUpdate" />
+                              <Label text="Mass:" />
+                              <Slider fx:id="radiusSLD" max="999999.0" min="1000.0" prefHeight="14.0" prefWidth="109.0" />
+                              <TextField fx:id="radiusTXTF" onAction="#onTXTFUpdate" prefHeight="25.0" prefWidth="60.0" />
                            </children>
                         </HBox>
                         <CheckBox fx:id="sunCheckB" mnemonicParsing="false" text="Sun" />
                         <Button fx:id="TextureBTN" mnemonicParsing="false" text="Texture" />
-                        <Button fx:id="createBTN" mnemonicParsing="false" text="Create" />
+                        <Button fx:id="createBTN" mnemonicParsing="false" onAction="#createCustomPlanet" text="Create" />
                      </children>
                   </VBox>
                </children></VBox>
